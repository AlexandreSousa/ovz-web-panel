#summary Information about Remote API.
#labels Phase-Implementation

<wiki:toc max_depth="3" />

= Introduction =

*Improtant note: Remote API will be available only in v2.0 (not released yet). You can use dev builds to test this functionality.*

Remote API allows to integrate OpenVZ Web Panel with third-party systems, e.g. billing systems. API exposes business logic objects and operations and gives the ability to manipulate with them using HTTP requests with XML responses. 

Typical API entry points:
{{{
http://<host>/api/hardware_servers/get?id=38
}}}
where "hardware_servers" - name of controller for manipulating with physical servers, "get" - particular method of controller, "id=38" - additional request parameters.

The response for such call is:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<hardware_server>
  <daemon_port type="integer">7767</daemon_port>
  <default_os_template>debian</default_os_template>
  <default_server_template>vps.basic2</default_server_template>
  <description></description>
  <host>host</host>
  <id type="integer">38</id>
  <use_ssl type="boolean">true</use_ssl>
</hardware_server>
}}}

= Authorization =

Remote API uses HTTP basic authorization mechanism.

= Error Handling =

TBD.

= Methods =

== Physical Servers ==

=== list ===

List of connected physical servers.

Request URL:
{{{
http://<host>/api/hardware_servers/list
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<hardware_servers type="array">
  <hardware_server>
    <daemon_port type="integer">7767</daemon_port>
    <default_os_template>ubuntu-9.10-x86</default_os_template>
    <default_server_template>vps.new</default_server_template>
    <description></description>
    <host>host</host>
    <id type="integer">4</id>
    <use_ssl type="boolean">false</use_ssl>
  </hardware_server>
  <hardware_server>
    ...
  </hardware_server>
</hardware_servers>

}}}

Parameters: absent.

=== get ===

Detailed information about particular physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/get?id=<id>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<hardware_server>
  <daemon_port type="integer">7767</daemon_port>
  <default_os_template>debian</default_os_template>
  <default_server_template>vps.basic2</default_server_template>
  <description></description>
  <host>host</host>
  <id type="integer">38</id>
  <use_ssl type="boolean">true</use_ssl>
</hardware_server>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||

=== server_templates ===

List of server templates available at physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/server_templates?id=<id>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<server_templates type="array">
  <server_template>
    <id type="integer">108</id>
    <name>light</name>
  </server_template>
  <server_template>
    ...
  </server_template>
</server_templates>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||

=== os_templates ===

List of installed OS templates at physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/os_templates?id=<id>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<os_templates type="array">
  <os_template>
    <id type="integer">477</id>
    <name>centos-5-x86_64</name>
    <size type="integer">182</size>
  </os_template>
  <os_template>
    ...
  </os_template>
</os_templates>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||

=== connect ===

Connect new physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/connect?host=<host>&root_password=<password>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<result>
  <status type="boolean">true</status>
  <details>
    <id type="integer">45</id>
  </details>
</result>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<host>` || + || IP address or host name of new server ||
|| `<root_password>` || + || SSH root user password ||
|| `<description>` || || server description ||

=== sync ===

Synchronize information about virtual servers at physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/sync?id=<id>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<result>
  <status type="boolean">true</status>
</result>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||

=== update ===

Update connection settings for physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/update?id=<id>&host=<host>&root_password=<password>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<result>
  <status type="boolean">true</status>
  <details>
    <id type="integer">45</id>
  </details>
</result>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||
|| `<host>` || + || IP address or host name of new server ||
|| `<root_password>` || + || SSH root user password ||
|| `<description>` || || server description ||

=== disconnect ===

Disconnect physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/disconnect?id=<id>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<result>
  <status type="boolean">true</status>
</result>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||

=== virtual_servers ===

List of virtual servers at physical server.

Request URL:
{{{
http://<host>/api/hardware_servers/virtual_servers?id=<id>
}}}

Example of response:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<virtual_servers type="array">
  <virtual_server>
    <cpu_limit type="integer" nil="true"></cpu_limit>
    <cpu_units type="integer">1000</cpu_units>
    <cpus type="integer" nil="true"></cpus>
    <description nil="true"></description>
    <diskspace type="integer">2000</diskspace>
    <expiration_date type="date" nil="true"></expiration_date>
    <hardware_server_id type="integer">38</hardware_server_id>
    <host_name>ldap.lan</host_name>
    <id type="integer">299</id>
    <identity type="integer">131</identity>
    <ip_address>192.168.0.131</ip_address>
    <memory type="integer">272</memory>
    <nameserver>192.168.0.4</nameserver>
    <orig_os_template>ubuntu-10.04-x86</orig_os_template>
    <orig_server_template>vps.basic</orig_server_template>
    <search_domain>lan</search_domain>
    <start_on_boot type="boolean">true</start_on_boot>
    <state>running</state>
    <user_id type="integer">0</user_id>
  </virtual_server>
  <virtual_server>
    ...
  </virtual_server>
 <virtual_servers>
}}}

Parameters:
|| *Parameter* || *Required* || *Description* ||
|| `<id>` || + || physical server ID ||

== Virtual Servers ==

=== get ===

=== delete ===

=== get_advanced_limits ===

=== stop ===

=== own_servers ===

=== create ===

=== start ===

=== restart ===

=== update ===

== Users ==

=== get ===

=== delete ===

=== list ===

=== create ===

=== enable ===

=== disable ===

=== update ===

== Roles ==

=== list ===

== Event Log ==

=== list ===

== Tasks ==

=== list ===

= Provisioning Scenarios =

TBD.

= API Client Code Samples =

TBD.